Structure of the Solution:
We have split up our solution into 3 python scripts, so we can keep each of our ideas
for one part of the game (e.g. placing phase and moving phase), separated from each other
so we are able to find certain functions easier and also experiment with different parts of the game.

So our solution contains:
- player.py
- placing_lib.py
- moving_lib.py

The player.py contains functions that are used across both phases of the game,
and it also contains the class player and the required methods as per the specification.

The placing_lib.py contains the functions that produce the agent's strategy within the placing
phase of the game. The major function is placing_phase() which gives a position to place
the next piece to back to the action() method within the player.py.

The moving_lib.py contains everything to do with the moving phase of the game. The major
components of the file are the moving_phase() function which gives an action set to the player.py.
Then also there is our "node" class Board_State, that we are currently using for nodes in our game trees.
This class is used heavily within our solution as our solution for the moving phase is to expand through
game trees and then pick the optimal state (firstly we're using alpha-beta pruning and minimax).

Placing Phase Strategy:
Book Learning:


Moving Phase Strategy:
Minimax and Alpha Beta Pruning Implementation:
Our  first implementation for our agent was taken from the lectures as we wanted something
that we could build off and then produce additional optimisations on. Our first Implementation
used minimax and alpha-beta pruning to reduce the memory and time complexity for selecting the next action.
For this purpose we determined an evaluation function to score our Board_State, this scoring was
dependent on if a move could kill off any opponent pieces, if the piece would be killed itself and also
how safe a move was, if it was closer to opponent or ally pieces.

Evaluation function:
We designed the evaluation function to try to group up the ally players so that
they would be able to move through the territory of the board more safely,
this was done by weighting moves where pieces move to allied territory higher
than going into many enemy pieces as it would risk that piece dying to the opponent.

We also designed the evaluation function to stick towards the middle so then it would
cut enemy players off from the middle meaning when the board was to shrink, the maximum
number of allied players would be safe while enemy players would be killed off as they
could not move into safe areas (PUBG anyone?).

We also didn't want any reckless moves made by our agent so if the move was to kill
the piece we would not want this move to be taken, hence the smallest value possible
would be assigned to it!

Finally we needed an incentive to take pieces so any move that would result in
enemy players getting killed would be a massive boost in the evaluation function.

Supplementary files:
In the Irrational folder is all the necessary files needed for a completely irrational player to play the game.
The irrational player makes only random legal moves, even if they're suicidal.
It was mainly a test-dummy to work out how the referee interfaces with the players and how to best update the player's internal memories.

Creativity of Solution:
From the lectures, we took our solution for an alpha-beta pruning minimax solution and pushed it further.
We produced a recursive solution to our original search problem as this allowed us to vary the depth of minimax.
In lectures we had only used 2-ply minimax, and we wanted to push it further than that so we can explore better
states of the game. Hence, we allowed minimax to vary in depth!

The actual solution itself and the strategies we placed into our evaluation function we also deemed to be very creative.
This is because we wanted to exploit the board shrinking features that happen at the different turns in the game.
So we designed our solution so we would try be passive in a sense but to keep pieces centered so then when the
board shrunk, it would kill off the opponent's pieces while our pieces were safe and it tight formations making it
harder for the other player to kill our pieces. We could also keep this strategy further resulting in the killing
of the other player's pieces
